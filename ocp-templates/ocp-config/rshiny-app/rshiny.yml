apiVersion: v1
kind: Template
labels:
  template: rshiny
  app: '${PROJECT}'
  component: '${COMPONENT}'
  env: '${ENV}'
parameters:
- description: The name of the application project.
  displayName: Project
  name: PROJECT
  required: true
- description: The name of the component
  displayName: Component
  name: COMPONENT
  required: true
- description: The environment stage.
  displayName: Environment
  name: ENV
  required: true
- description: Authentication Crowd user
  displayName: crowd user
  name: CROWD_RSHINY_REALM_USER
  required: true
- description: Authentication Crowd pw
  displayName: crowd pw
  name: CROWD_RSHINY_REALM_PW
  required: true
- name: NEXUS_URL
  required: true
- name: NEXUS_USERNAME
  required: true
- name: NEXUS_PASSWORD
  required: true
- description: The application domain
  displayName: app domain
  name: OD_OCP_SOURCE_APP_DOMAIN
  required: true
objects:
  # Route form this component to authproxy
  - apiVersion: v1
    kind: Route
    metadata:
      creationTimestamp: null
      name: ${COMPONENT}
    spec:
      host: ${COMPONENT}-${PROJECT}-${ENV}.${OD_OCP_SOURCE_APP_DOMAIN}
      port:
        targetPort: 80-tcp
      tls:
        termination: edge
      to:
        kind: Service
        name: ${COMPONENT}-authproxy
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: null
      labels:
        app: ${PROJECT}
        component: ${COMPONENT}
        env: ${ENV}
      name: ${COMPONENT}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentconfig: ${COMPONENT}
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      creationTimestamp: null
      generation: 1
      name: ${COMPONENT}
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        name: ${COMPONENT}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: ${COMPONENT}
        spec:
          containers:
          - env:
            - name: NEXUS_URL
              value: '${NEXUS_URL}'
            - name: NEXUS_USERNAME
              value: '${NEXUS_USERNAME}'
            - name: NEXUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: nexus
            imagePullPolicy: IfNotPresent
            name: ${COMPONENT}
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          containerNames:
          - ${COMPONENT}
          from:
            kind: ImageStreamTag
            name: ${COMPONENT}:latest
            namespace: ${PROJECT}-${ENV}
        type: ImageChange
    status: {}
  - apiVersion: v1
    kind: ImageStream
    metadata:
      annotations:
        description: Keeps track of changes in the application image
      labels:
        app: '${PROJECT}'
        component: '${COMPONENT}'
        env: '${ENV}'
      name: '${COMPONENT}'
    spec:
      dockerImageRepository: '${COMPONENT}'
      lookupPolicy:
        local: false
